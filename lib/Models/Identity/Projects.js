// Generated by CoffeeScript 1.8.0
(function() {
  var BaseModel, Projects, minimatch, _,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  BaseModel = require('../../BaseModel');

  _ = require('underscore');

  minimatch = require('minimatch');

  Projects = (function(_super) {
    var Project;

    __extends(Projects, _super);

    Project = null;

    function Projects(client) {
      this.client = client;
      this.show = __bind(this.show, this);
      this.find = __bind(this.find, this);
      this.all = __bind(this.all, this);
      this.init = __bind(this.init, this);
      Projects.__super__.constructor.call(this, client);
      Project = require('./Project')(this.client);
    }

    Projects.prototype.init = function() {
      return this.type = "identity";
    };

    Projects.prototype.all = function(params, fn) {
      if (params == null) {
        params = {};
      }
      if (fn == null) {
        fn = null;
      }
      this.debug("all()");
      if (typeof params === 'function') {
        fn = params;
        params = {};
      }
      return this.get("projects", (function(_this) {
        return function(data) {
          var projects, _ref;
          projects = [];
          _.each((_ref = data.projects) != null ? _ref : [], function(project) {
            var _project;
            _project = Project(project);
            return projects.push(_project);
          });
          if (fn) {
            return fn(projects);
          }
        };
      })(this));
    };

    Projects.prototype.find = function(params, fn) {
      if (params == null) {
        params = {};
      }
      if (fn == null) {
        fn = null;
      }
      this.debug("find()");
      if (typeof params === 'function') {
        fn = params;
        params = {};
      }
      if (!params.name) {
        throw "`name` is mandatory";
      }
      this.debug(params);
      return this.all(params, (function(_this) {
        return function(projects) {
          var matches;
          matches = [];
          _.each(projects, function(project) {
            _this.debug(project);
            if (minimatch(project.name, params.name)) {
              return matches.push(project);
            }
          });
          if (fn) {
            return fn(matches);
          }
        };
      })(this));
    };

    Projects.prototype.show = function(params, fn) {
      if (params == null) {
        params = {};
      }
      if (fn == null) {
        fn = null;
      }
      this.debug("show()");
      if (typeof params === 'function') {
        fn = params;
        params = {};
      }
      if (!params.project_id) {
        throw "`project_id` is mandatory";
      }
      return this.get("projects/" + params.project_id, (function(_this) {
        return function(data) {
          if (data.project) {
            if (fn) {
              return fn(Project(data.project));
            }
          } else {
            if (fn) {
              return fn({});
            }
          }
        };
      })(this));
    };

    return Projects;

  })(BaseModel);

  module.exports = function(client) {
    return new Projects(client);
  };

}).call(this);
