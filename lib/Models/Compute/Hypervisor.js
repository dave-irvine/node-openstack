// Generated by CoffeeScript 1.8.0
(function() {
  var BaseModel, Hypervisor, minimatch, _,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  BaseModel = require('../../BaseModel');

  _ = require('underscore');

  minimatch = require('minimatch');

  Hypervisor = (function(_super) {
    __extends(Hypervisor, _super);

    function Hypervisor(client, hypervisor) {
      this.servers = __bind(this.servers, this);
      this.init = __bind(this.init, this);
      Hypervisor.__super__.constructor.call(this, client);
      this.id = hypervisor.id;
      this.hostname = hypervisor.hypervisor_hostname;
    }

    Hypervisor.prototype.init = function() {
      return this.type = "compute";
    };

    Hypervisor.prototype.servers = function(params, fn) {
      var query;
      if (params == null) {
        params = {};
      }
      if (fn == null) {
        fn = null;
      }
      this.debug("servers()");
      if (typeof params === 'function') {
        fn = params;
        params = {};
      }
      query = {};
      if (params.tenant_id) {
        query.context = params.tenant_id;
      } else {
        query.all_tenants = 1;
        query.context = "%context%";
      }
      return this.find(params, (function(_this) {
        return function(matches) {
          if (matches.length < 1) {
            throw "No results for " + params.hypervisor_hostname;
          } else if (matches.length > 1) {
            throw "" + params.hypervisor_hostname + " returned multiple results";
          } else {
            return _this.get("%context%/os-hypervisors/" + matches[0].hypervisor_hostname + "/servers", query, function(data) {
              if (fn) {
                return fn(data.hypervisors[0].servers);
              }
            });
          }
        };
      })(this));
    };

    return Hypervisor;

  })(BaseModel);

  module.exports = function(client) {
    return function(hypervisor) {
      var _hypervisor;
      return _hypervisor = new Hypervisor(client, hypervisor);
    };
  };

}).call(this);
