// Generated by CoffeeScript 1.8.0
(function() {
  var BaseModel, Service, debug, minimatch, _,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  BaseModel = require('../../BaseModel');

  _ = require('underscore');

  minimatch = require('minimatch');

  debug = require('debug')("OpenStack:Models:Service");

  Service = (function(_super) {
    __extends(Service, _super);

    function Service(client, service) {
      this.enabled = __bind(this.enabled, this);
      this.disabled = __bind(this.disabled, this);
      this.disable = __bind(this.disable, this);
      this.enable = __bind(this.enable, this);
      this.init = __bind(this.init, this);
      debug(service);
      Service.__super__.constructor.call(this, client);
      this.status = service.status;
      this.binary = service.binary;
      this.zone = service.zone;
      this.disabled_reason = service.disabled_reason;
      this.host = service.host;
      this.tenant_id = service.tenant_id;
    }

    Service.prototype.init = function() {
      return this.type = "compute";
    };

    Service.prototype.enable = function(fn) {
      var params;
      if (fn == null) {
        fn = null;
      }
      this.debug("enable()");
      params = {
        binary: this.binary,
        host: this.host
      };
      return this.put("" + this.tenant_id + "/os-services/enable", params, (function(_this) {
        return function(data) {
          _this.status = 'enabled';
          if (fn) {
            return fn(data);
          }
        };
      })(this));
    };

    Service.prototype.disable = function(fn) {
      var params;
      if (fn == null) {
        fn = null;
      }
      this.debug("disable()");
      params = {
        binary: this.binary,
        host: this.host
      };
      return this.put("" + this.tenant_id + "/os-services/disable", params, (function(_this) {
        return function(data) {
          _this.status = 'disabled';
          if (fn) {
            return fn(data);
          }
        };
      })(this));
    };

    Service.prototype.disabled = function() {
      return this.status === 'disabled';
    };

    Service.prototype.enabled = function() {
      return this.status === 'enabled';
    };

    return Service;

  })(BaseModel);

  module.exports = function(client) {
    return function(service) {
      var _server;
      return _server = new Service(client, service);
    };
  };

}).call(this);
