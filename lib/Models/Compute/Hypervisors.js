// Generated by CoffeeScript 1.8.0
(function() {
  var BaseModel, Hypervisors, minimatch, _,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  BaseModel = require('../../BaseModel');

  _ = require('underscore');

  minimatch = require('minimatch');

  Hypervisors = (function(_super) {
    var Hypervisor;

    __extends(Hypervisors, _super);

    Hypervisor = null;

    function Hypervisors(client) {
      this.client = client;
      this.show = __bind(this.show, this);
      this.find = __bind(this.find, this);
      this.all = __bind(this.all, this);
      this.init = __bind(this.init, this);
      Hypervisors.__super__.constructor.call(this, client);
      Hypervisor = require('./Hypervisor')(this.client);
    }

    Hypervisors.prototype.init = function() {
      this.debug("init()");
      return this.type = "compute";
    };

    Hypervisors.prototype.all = function(params, fn) {
      var detail, query;
      if (params == null) {
        params = {};
      }
      if (fn == null) {
        fn = null;
      }
      this.debug("all()");
      if (typeof params === 'function') {
        fn = params;
        params = {};
      }
      query = {};
      if (params.tenant_id) {
        query.context = params.tenant_id;
      } else {
        query.all_tenants = 1;
        query.context = "%context%";
      }
      if (params.detail) {
        detail = "/detail";
      } else {
        detail = "";
      }
      return this.get("%context%/os-hypervisors" + detail, query, (function(_this) {
        return function(data) {
          var hypervisors;
          hypervisors = [];
          _.each(data.hypervisors, function(hypervisor) {
            return hypervisors.push(Hypervisor(hypervisor));
          });
          if (fn) {
            return fn(hypervisors);
          }
        };
      })(this));
    };

    Hypervisors.prototype.find = function(params, fn) {
      if (params == null) {
        params = {};
      }
      if (fn == null) {
        fn = null;
      }
      this.debug("find()");
      if (typeof params === 'function') {
        fn = params;
        params = {};
      }
      if (!params.hypervisor_hostname) {
        throw "`hypervisor_hostname` is mandatory";
      }
      this.debug(params);
      return this.all(params, (function(_this) {
        return function(hypervisors) {
          var matches;
          matches = [];
          _.each(hypervisors, function(hypervisor) {
            _this.debug(hypervisor);
            if (minimatch(hypervisor.hostname, params.hypervisor_hostname)) {
              return matches.push(hypervisor);
            }
          });
          if (fn) {
            return fn(matches);
          }
        };
      })(this));
    };

    Hypervisors.prototype.show = function(params, fn) {
      if (params == null) {
        params = {};
      }
      if (fn == null) {
        fn = null;
      }
      this.debug("show()");
      if (typeof params === 'function') {
        fn = params;
        params = {};
      }
      if (!params.hypervisor_hostname) {
        throw "`hypervisor_hostname` is mandatory";
      }
      return this.find(params, function(matches) {
        if (matches.length < 1) {
          throw "No results for " + params.hypervisor_hostname;
        } else if (matches.length > 1) {
          throw "" + params.hypervisor_hostname + " returned multiple results";
        } else {
          if (fn) {
            return fn(matches[0]);
          }
        }
      });
    };

    return Hypervisors;

  })(BaseModel);

  module.exports = function(client) {
    return new Hypervisors(client);
  };

}).call(this);
