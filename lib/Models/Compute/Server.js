// Generated by CoffeeScript 1.8.0
(function() {
  var BaseModel, Server, minimatch, _,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  BaseModel = require('../../BaseModel');

  _ = require('underscore');

  minimatch = require('minimatch');

  Server = (function(_super) {
    __extends(Server, _super);

    function Server(client, server) {
      this.populate = __bind(this.populate, this);
      this.init = __bind(this.init, this);
      var _ref, _ref1;
      Server.__super__.constructor.call(this, client);
      this.id = (_ref = server.uuid) != null ? _ref : server.id;
      this.name = (_ref1 = server.name) != null ? _ref1 : "";
    }

    Server.prototype.init = function() {
      return this.type = "compute";
    };

    Server.prototype.populate = function(full, fn) {
      if (full == null) {
        full = false;
      }
      if (fn == null) {
        fn = null;
      }
      if (typeof full === 'function') {
        fn = full;
        full = false;
      }
      return this.client.servers.show({
        id: this.id
      }, (function(_this) {
        return function(data) {
          _this.debug(data.server);
          _this.status = data.server.status;
          _this.addresses = data.server.addresses;
          _this.name = data.server.name;
          if (full) {
            return _this.client.hypervisors.show({
              hypervisor_hostname: data.server['OS-EXT-SRV-ATTR:hypervisor_hostname']
            }, function(hypervisor) {
              _this.hypervisor = hypervisor;
              if (fn) {
                return fn(_this);
              }
            });
          } else {
            if (fn) {
              return fn(_this);
            }
          }
        };
      })(this));
    };

    return Server;

  })(BaseModel);

  module.exports = function(client) {
    return function(server) {
      var _server;
      return _server = new Server(client, server);
    };
  };

}).call(this);
