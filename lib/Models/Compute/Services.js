// Generated by CoffeeScript 1.8.0
(function() {
  var BaseModel, Services, minimatch, _,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  BaseModel = require('../../BaseModel');

  _ = require('underscore');

  minimatch = require('minimatch');

  Services = (function(_super) {
    var Service;

    __extends(Services, _super);

    Service = null;

    function Services(client) {
      this.client = client;
      this.all = __bind(this.all, this);
      this.init = __bind(this.init, this);
      Services.__super__.constructor.call(this, client);
      Service = require('./Service')(this.client);
    }

    Services.prototype.init = function() {
      this.debug("init()");
      return this.type = "compute";
    };

    Services.prototype.all = function(params, fn) {
      var detail, query;
      if (params == null) {
        params = {};
      }
      if (fn == null) {
        fn = null;
      }
      this.debug("all()");
      if (typeof params === 'function') {
        fn = params;
        params = {};
      }
      query = {};
      if (params.tenant_id) {
        query.context = params.tenant_id;
      } else {
        query.all_tenants = 1;
        query.context = "%context%";
      }
      if (params.detail) {
        detail = "/detail";
      } else {
        detail = "";
      }
      return this.get("%context%/os-services" + detail, query, (function(_this) {
        return function(data) {
          var services;
          services = [];
          _.each(data.services, function(service) {
            var _service;
            service.tenant_id = _this.client.auth_token.context;
            _service = Service(service);
            return services.push(_service);
          });
          if (fn) {
            return fn(services);
          }
        };
      })(this));
    };

    return Services;

  })(BaseModel);

  module.exports = function(client) {
    return new Services(client);
  };

}).call(this);
