// Generated by CoffeeScript 1.8.0
(function() {
  var ApiBase, debug, querystring, request, urljoin,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  debug = require('debug')('OpenStack:ApiBase');

  ApiBase = require('./ApiBase').ApiBase;

  urljoin = require('url-join');

  querystring = require('querystring');

  request = require('request');

  module.exports.ApiBase = (function() {
    function ApiBase(options) {
      this.options = options;
      this.put = __bind(this.put, this);
      this.post = __bind(this.post, this);
      this.get = __bind(this.get, this);
      this.prepareOpts = __bind(this.prepareOpts, this);
      this.fixPath = __bind(this.fixPath, this);
      this.init = __bind(this.init, this);
      this.handleOptions = __bind(this.handleOptions, this);
      debug("constructor()");
      if (!this.options) {
        throw "`options` is mandatory";
      }
      this.handleOptions();
      this.init();
    }

    ApiBase.prototype.handleOptions = function() {
      debug("handleOptions()");
      if (!this.options.identity_url) {
        throw "`identity_url` is mandatory";
      }
      if (!this.options.compute_url) {
        throw "`compute_url` is mandatory";
      }
      if (!this.options.username) {
        throw "`username` is mandatory";
      }
      if (!this.options.password) {
        throw "`password` is mandatory";
      }
      this.options.default_headers = {
        "Content-Type": "application/json",
        "Accept": "application/json"
      };
      return this.options.endpoints = {
        identity: urljoin(this.options.identity_url, "v3/"),
        compute: urljoin(this.options.compute_url, "v2/")
      };
    };

    ApiBase.prototype.init = function() {
      debug("init()");
      this.client = this;
      this.base_post = (function(_this) {
        return function(path, data, fn) {
          var opts;
          if (data == null) {
            data = {};
          }
          if (fn == null) {
            fn = null;
          }
          debug("base_post() : " + path);
          opts = _this.prepareOpts(path, data, "POST");
          debug(opts);
          return request(opts, function(err, response, body) {
            debug("post request return");
            if (!err) {
              if (fn) {
                return fn(JSON.parse(body), response.headers);
              }
            } else {
              throw "error from API: " + err;
            }
          });
        };
      })(this);
      this.base_put = (function(_this) {
        return function(path, data, fn) {
          var opts;
          if (data == null) {
            data = {};
          }
          if (fn == null) {
            fn = null;
          }
          debug("base_put() : " + path);
          opts = _this.prepareOpts(path, data, "PUT");
          debug(opts);
          return request(opts, function(err, response, body) {
            debug("put request return");
            if (!err) {
              if (fn) {
                return fn(JSON.parse(body), response.headers);
              }
            } else {
              throw "error from API: " + err;
            }
          });
        };
      })(this);
      return this.base_get = (function(_this) {
        return function(path, query, fn) {
          var opts;
          if (query == null) {
            query = {};
          }
          if (fn == null) {
            fn = null;
          }
          debug("base_get() : " + path + " " + (querystring.stringify(query)));
          if (typeof query === 'function') {
            fn = query;
            query = {};
          }
          opts = _this.prepareOpts(path, query, "GET");
          debug(opts);
          return request(opts, function(err, response, body) {
            debug("get request return");
            if (!err) {
              if (fn) {
                return fn(JSON.parse(body), response.headers);
              }
            } else {
              throw "error from API: " + err;
            }
          });
        };
      })(this);
    };

    ApiBase.prototype.fixPath = function(path) {
      debug("fixPath()");
      return path.replace(/\/$/, '') + '/';
    };

    ApiBase.prototype.prepareOpts = function(path, opts, method) {
      var finalopts, _ref;
      debug("prepareOpts()");
      finalopts = {
        uri: path,
        method: method,
        headers: (_ref = this.options.request_headers) != null ? _ref : this.options.default_headers
      };
      switch (method) {
        case "POST":
          finalopts.body = JSON.stringify(opts);
          break;
        case "PUT":
          finalopts.body = JSON.stringify(opts);
          break;
        case "GET":
          finalopts.uri = urljoin(path, "?" + (querystring.stringify(opts)));
      }
      finalopts.uri = finalopts.uri.replace(/\?$/, '');
      return finalopts;
    };

    ApiBase.prototype.get = function(path, query, fn) {
      if (query == null) {
        query = {};
      }
      if (fn == null) {
        fn = null;
      }
      return this.base_get(path, query, fn);
    };

    ApiBase.prototype.post = function(path, data, fn) {
      if (data == null) {
        data = {};
      }
      if (fn == null) {
        fn = null;
      }
      return this.base_post(path, data, fn);
    };

    ApiBase.prototype.put = function(path, data, fn) {
      if (data == null) {
        data = {};
      }
      if (fn == null) {
        fn = null;
      }
      return this.base_put(path, data, fn);
    };

    return ApiBase;

  })();

}).call(this);
